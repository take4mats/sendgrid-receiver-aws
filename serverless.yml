service: sendgrid-receiver

provider:
  name: aws
  runtime: python3.6
  profile: ${opt:profile}  # read from CLI option --profile
  region: ${opt:region}  # read from CLI option region
  stage: ${opt:stage}  # read from CLI option --stage
  logRetentionInDays: 7  # CloudWatchLog
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - s3:PutObject
      Resource: '*'
plugins:
  - serverless-offline-python
  - serverless-prune-plugin  # deletes old version of CloudFormation stack deployments
  - serverless-plugin-stage-variables  # for apigw logging
  - serverless-python-requirements  # allow pip

custom:
  prune:  # retain 3 generations of CloudFormation stack configs in S3 buckets
    atuomatic: true
    number: 3
  pythonRequirements:
    dockerizePip: true

resources:
  Description: ${self:provider.stage} CloudFormation stack
  Resources:
    ApiGatewayRestApi:  # setting name and description of APIGW
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: sendgrid-receiver-api
        Description: SendGrid receiver API (Lambda-proxy integration)
    ApiGatewayStage:  # for apigw logging
      Type: AWS::ApiGateway::stage
      Properties:
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: "*"
            LoggingLevel: INFO
            ResourcePath: "/*"
            MetricsEnabled: true

functions:  # Lambda configuration
  'sendgrid-receiver':
    handler: lambda_function.lambda_handler
    name: sendgrid-receiver-function-${self:provider.stage}
    description: ${self:provider.stage} Lambda function
    events:  # define resources one by one to save Lambda from consumption
      - http:
          path: /receive
          method: post
          cors: false

package:  # exclude dev files first, and then include necessary files
  exclude:
    - '**'
  include:
    - 'lambda_function.py'
    - 'template_email_html.j2'
    - 'requirements.txt'
    - '.env'
